(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[666],{7265:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/pages",function(){return t(3311)}])},7845:function(e,n,t){"use strict";var s=t(5893),r=t(5988),a=(new Date).getFullYear();n.Z={footer:(0,s.jsxs)("small",{style:{display:"block",marginTop:"8rem"},className:"jsx-7c359fde634f3543",children:[(0,s.jsx)("time",{className:"jsx-7c359fde634f3543",children:a})," \xa9 Agam Dimaestra.",(0,s.jsx)("a",{href:"/feed.xml",className:"jsx-7c359fde634f3543",children:"RSS"}),(0,s.jsx)(r.default,{id:"7c359fde634f3543",children:"a.jsx-7c359fde634f3543{float:right}\n@media screen and (max-width:480px) {article.jsx-7c359fde634f3543{padding-top:2rem;\npadding-bottom:4rem}}"})]}),darkMode:!0}},3311:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return p}});var s=t(5893),r=t(8616),a=t(3805),o=t(7845),i=t(1151);function d(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},s=Object.keys(t);"function"===typeof Object.getOwnPropertySymbols&&(s=s.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),s.forEach((function(n){d(e,n,t[n])}))}return e}function l(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=function(){var n=Object.assign({h1:"h1",p:"p",strong:"strong",a:"a",code:"code",pre:"pre",h3:"h3",blockquote:"blockquote",h2:"h2",em:"em",ul:"ul",li:"li",ol:"ol",h4:"h4"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{children:"Next.js Pages"}),"\n",(0,s.jsxs)(n.p,{children:["In Next.js, a ",(0,s.jsx)(n.strong,{children:"page"})," is a ",(0,s.jsx)(n.a,{href:"https://reactjs.org/docs/components-and-props.html",children:"React Component"})," exported from a ",(0,s.jsx)(n.code,{children:".js"}),", ",(0,s.jsx)(n.code,{children:".jsx"}),", ",(0,s.jsx)(n.code,{children:".ts"}),", or ",(0,s.jsx)(n.code,{children:".tsx"})," file in the ",(0,s.jsx)(n.code,{children:"pages"})," directory. Each page is associated with a route based on its file name."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example"}),": If you create ",(0,s.jsx)(n.code,{children:"pages/about.js"})," that exports a React component like below, it will be accessible at ",(0,s.jsx)(n.code,{children:"/about"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"function About() {\n  return <div>About</div>\n}\n\nexport default About\n"})}),"\n",(0,s.jsx)(n.h3,{children:"Pages with Dynamic Routes"}),"\n",(0,s.jsxs)(n.p,{children:["Next.js supports pages with dynamic routes. For example, if you create a file called ",(0,s.jsx)(n.code,{children:"pages/posts/[id].js"}),", then it will be accessible at ",(0,s.jsx)(n.code,{children:"posts/1"}),", ",(0,s.jsx)(n.code,{children:"posts/2"}),", etc."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["To learn more about dynamic routing, check the ",(0,s.jsx)(n.a,{href:"/docs/routing/dynamic-routes.md",children:"Dynamic Routing documentation"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{children:"Pre-rendering"}),"\n",(0,s.jsxs)(n.p,{children:["By default, Next.js ",(0,s.jsx)(n.strong,{children:"pre-renders"})," every page. This means that Next.js generates HTML for each page in advance, instead of having it all done by client-side JavaScript. Pre-rendering can result in better performance and SEO."]}),"\n",(0,s.jsxs)(n.p,{children:["Each generated HTML is associated with minimal JavaScript code necessary for that page. When a page is loaded by the browser, its JavaScript code runs and makes the page fully interactive. (This process is called ",(0,s.jsx)(n.em,{children:"hydration"}),".)"]}),"\n",(0,s.jsx)(n.h3,{children:"Two forms of Pre-rendering"}),"\n",(0,s.jsxs)(n.p,{children:["Next.js has two forms of pre-rendering: ",(0,s.jsx)(n.strong,{children:"Static Generation"})," and ",(0,s.jsx)(n.strong,{children:"Server-side Rendering"}),". The difference is in ",(0,s.jsx)(n.strong,{children:"when"})," it generates the HTML for a page."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#static-generation-recommended",children:(0,s.jsx)(n.strong,{children:"Static Generation (Recommended)"})}),": The HTML is generated at ",(0,s.jsx)(n.strong,{children:"build time"})," and will be reused on each request."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#server-side-rendering",children:(0,s.jsx)(n.strong,{children:"Server-side Rendering"})}),": The HTML is generated on ",(0,s.jsx)(n.strong,{children:"each request"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Importantly, Next.js lets you ",(0,s.jsx)(n.strong,{children:"choose"}),' which pre-rendering form you\'d like to use for each page. You can create a "hybrid" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.']}),"\n",(0,s.jsxs)(n.p,{children:["We ",(0,s.jsx)(n.strong,{children:"recommend"})," using ",(0,s.jsx)(n.strong,{children:"Static Generation"})," over Server-side Rendering for performance reasons. Statically generated pages can be cached by CDN with no extra configuration to boost performance. However, in some cases, Server-side Rendering might be the only option."]}),"\n",(0,s.jsxs)(n.p,{children:["You can also use ",(0,s.jsx)(n.strong,{children:"Client-side Rendering"})," along with Static Generation or Server-side Rendering. That means some parts of a page can be rendered entirely by client side JavaScript. To learn more, take a look at the ",(0,s.jsx)(n.a,{href:"/docs/basic-features/data-fetching.md#fetching-data-on-the-client-side",children:"Data Fetching"})," documentation."]}),"\n",(0,s.jsx)(n.h2,{children:"Static Generation (Recommended)"}),"\n",(0,s.jsxs)(n.p,{children:["If a page uses ",(0,s.jsx)(n.strong,{children:"Static Generation"}),", the page HTML is generated at ",(0,s.jsx)(n.strong,{children:"build time"}),". That means in production, the page HTML is generated when you run ",(0,s.jsx)(n.code,{children:"next build"})," . This HTML will then be reused on each request. It can be cached by a CDN."]}),"\n",(0,s.jsxs)(n.p,{children:["In Next.js, you can statically generate pages ",(0,s.jsx)(n.strong,{children:"with or without data"}),". Let's take a look at each case."]}),"\n",(0,s.jsx)(n.h3,{children:"Static Generation without data"}),"\n",(0,s.jsx)(n.p,{children:"By default, Next.js pre-renders pages using Static Generation without fetching data. Here's an example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"function About() {\n  return <div>About</div>\n}\n\nexport default About\n"})}),"\n",(0,s.jsx)(n.p,{children:"Note that this page does not need to fetch any external data to be pre-rendered. In cases like this, Next.js generates a single HTML file per page during build time."}),"\n",(0,s.jsx)(n.h3,{children:"Static Generation with data"}),"\n",(0,s.jsx)(n.p,{children:"Some pages require fetching external data for pre-rendering. There are two scenarios, and one or both might apply. In each case, you can use a special function Next.js provides:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Your page ",(0,s.jsx)(n.strong,{children:"content"})," depends on external data: Use ",(0,s.jsx)(n.code,{children:"getStaticProps"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Your page ",(0,s.jsx)(n.strong,{children:"paths"})," depend on external data: Use ",(0,s.jsx)(n.code,{children:"getStaticPaths"})," (usually in addition to ",(0,s.jsx)(n.code,{children:"getStaticProps"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{children:["Scenario 1: Your page ",(0,s.jsx)(n.strong,{children:"content"})," depends on external data"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example"}),": Your blog page might need to fetch the list of blog posts from a CMS (content management system)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"// TODO: Need to fetch `posts` (by calling some API endpoint)\n//       before this page can be pre-rendered.\nfunction Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n\nexport default Blog\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To fetch this data on pre-render, Next.js allows you to ",(0,s.jsx)(n.code,{children:"export"})," an ",(0,s.jsx)(n.code,{children:"async"})," function called ",(0,s.jsx)(n.code,{children:"getStaticProps"})," from the same file. This function gets called at build time and lets you pass fetched data to the page's ",(0,s.jsx)(n.code,{children:"props"})," on pre-render."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"function Blog({ posts }) {\n  // Render posts...\n}\n\n// This function gets called at build time\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts\n    }\n  }\n}\n\nexport default Blog\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To learn more about how ",(0,s.jsx)(n.code,{children:"getStaticProps"})," works, check out the ",(0,s.jsx)(n.a,{href:"/docs/basic-features/data-fetching.md#getstaticprops-static-generation",children:"Data Fetching documentation"}),"."]}),"\n",(0,s.jsx)(n.h4,{children:"Scenario 2: Your page paths depend on external data"}),"\n",(0,s.jsxs)(n.p,{children:["Next.js allows you to create pages with ",(0,s.jsx)(n.strong,{children:"dynamic routes"}),". For example, you can create a file called ",(0,s.jsx)(n.code,{children:"pages/posts/[id].js"})," to show a single blog post based on ",(0,s.jsx)(n.code,{children:"id"}),". This will allow you to show a blog post with ",(0,s.jsx)(n.code,{children:"id: 1"})," when you access ",(0,s.jsx)(n.code,{children:"posts/1"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["To learn more about dynamic routing, check the ",(0,s.jsx)(n.a,{href:"/docs/routing/dynamic-routes.md",children:"Dynamic Routing documentation"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["However, which ",(0,s.jsx)(n.code,{children:"id"})," you want to pre-render at build time might depend on external data."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example"}),": suppose that you've only added one blog post (with ",(0,s.jsx)(n.code,{children:"id: 1"}),") to the database. In this case, you'd only want to pre-render ",(0,s.jsx)(n.code,{children:"posts/1"})," at build time."]}),"\n",(0,s.jsxs)(n.p,{children:["Later, you might add the second post with ",(0,s.jsx)(n.code,{children:"id: 2"}),". Then you'd want to pre-render ",(0,s.jsx)(n.code,{children:"posts/2"})," as well."]}),"\n",(0,s.jsxs)(n.p,{children:["So your page ",(0,s.jsx)(n.strong,{children:"paths"})," that are pre-rendered depend on external data**.** To handle this, Next.js lets you ",(0,s.jsx)(n.code,{children:"export"})," an ",(0,s.jsx)(n.code,{children:"async"})," function called ",(0,s.jsx)(n.code,{children:"getStaticPaths"})," from a dynamic page (",(0,s.jsx)(n.code,{children:"pages/posts/[id].js"})," in this case). This function gets called at build time and lets you specify which paths you want to pre-render."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"// This function gets called at build time\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { id: post.id }\n  }))\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Also in ",(0,s.jsx)(n.code,{children:"pages/posts/[id].js"}),", you need to export ",(0,s.jsx)(n.code,{children:"getStaticProps"})," so that you can fetch the data about the post with this ",(0,s.jsx)(n.code,{children:"id"})," and use it to pre-render the page:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"function Post({ post }) {\n  // Render post...\n}\n\nexport async function getStaticPaths() {\n  // ...\n}\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return { props: { post } }\n}\n\nexport default Post\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To learn more about how ",(0,s.jsx)(n.code,{children:"getStaticPaths"})," works, check out the ",(0,s.jsx)(n.a,{href:"/docs/basic-features/data-fetching.md#getstaticpaths-static-generation",children:"Data Fetching documentation"}),"."]}),"\n",(0,s.jsx)(n.h3,{children:"When should I use Static Generation?"}),"\n",(0,s.jsxs)(n.p,{children:["We recommend using ",(0,s.jsx)(n.strong,{children:"Static Generation"})," (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request."]}),"\n",(0,s.jsx)(n.p,{children:"You can use Static Generation for many types of pages, including:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Marketing pages"}),"\n",(0,s.jsx)(n.li,{children:"Blog posts"}),"\n",(0,s.jsx)(n.li,{children:"E-commerce product listings"}),"\n",(0,s.jsx)(n.li,{children:"Help and documentation"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:['You should ask yourself: "Can I pre-render this page ',(0,s.jsx)(n.strong,{children:"ahead"})," of a user's request?\" If the answer is yes, then you should choose Static Generation."]}),"\n",(0,s.jsxs)(n.p,{children:["On the other hand, Static Generation is ",(0,s.jsx)(n.strong,{children:"not"})," a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request."]}),"\n",(0,s.jsx)(n.p,{children:"In cases like this, you can do one of the following:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use Static Generation with ",(0,s.jsx)(n.strong,{children:"Client-side Rendering:"})," You can skip pre-rendering some parts of a page and then use client-side JavaScript to populate them. To learn more about this approach, check out the ",(0,s.jsx)(n.a,{href:"/docs/basic-features/data-fetching.md#fetching-data-on-the-client-side",children:"Data Fetching documentation"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"Server-Side Rendering:"})," Next.js pre-renders a page on each request. It will be slower because the page cannot be cached by a CDN, but the pre-rendered page will always be up-to-date. We'll talk about this approach below."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{children:"Server-side Rendering"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:'Also referred to as "SSR" or "Dynamic Rendering".'}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If a page uses ",(0,s.jsx)(n.strong,{children:"Server-side Rendering"}),", the page HTML is generated on ",(0,s.jsx)(n.strong,{children:"each request"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To use Server-side Rendering for a page, you need to ",(0,s.jsx)(n.code,{children:"export"})," an ",(0,s.jsx)(n.code,{children:"async"})," function called ",(0,s.jsx)(n.code,{children:"getServerSideProps"}),". This function will be called by the server on every request."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, suppose that your page needs to pre-render frequently updated data (fetched from an external API). You can write ",(0,s.jsx)(n.code,{children:"getServerSideProps"})," which fetches this data and passes it to ",(0,s.jsx)(n.code,{children:"Page"})," like below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"function Page({ data }) {\n  // Render data...\n}\n\n// This gets called on every request\nexport async function getServerSideProps() {\n  // Fetch data from external API\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n\n  // Pass data to the page via props\n  return { props: { data } }\n}\n\nexport default Page\n"})}),"\n",(0,s.jsxs)(n.p,{children:["As you can see, ",(0,s.jsx)(n.code,{children:"getServerSideProps"})," is similar to ",(0,s.jsx)(n.code,{children:"getStaticProps"}),", but the difference is that ",(0,s.jsx)(n.code,{children:"getServerSideProps"})," is run on every request instead of on build time."]}),"\n",(0,s.jsxs)(n.p,{children:["To learn more about how ",(0,s.jsx)(n.code,{children:"getServerSideProps"})," works, check out our ",(0,s.jsx)(n.a,{href:"/docs/basic-features/data-fetching.md#getserversideprops-server-side-rendering",children:"Data Fetching documentation"})]}),"\n",(0,s.jsx)(n.h2,{children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"We've discussed two forms of pre-rendering for Next.js."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Static Generation (Recommended):"})," The HTML is generated at ",(0,s.jsx)(n.strong,{children:"build time"})," and will be reused on each request. To make a page use Static Generation, either export the page component, or export ",(0,s.jsx)(n.code,{children:"getStaticProps"})," (and ",(0,s.jsx)(n.code,{children:"getStaticPaths"})," if necessary). It's great for pages that can be pre-rendered ahead of a user's request. You can also use it with Client-side Rendering to bring in additional data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server-side Rendering:"})," The HTML is generated on ",(0,s.jsx)(n.strong,{children:"each request"}),". To make a page use Server-side Rendering, export ",(0,s.jsx)(n.code,{children:"getServerSideProps"}),". Because Server-side Rendering results in slower performance than Static Generation, use this only if absolutely necessary."]}),"\n"]})]})},t=Object.assign({},(0,i.ah)(),e.components),r=t.wrapper;return r?(0,s.jsx)(r,c({},e,{children:(0,s.jsx)(n,{})})):n()}var h=(0,s.jsx)(l,{});function p(e){return(0,a.withSSG)((0,r.Z)({filename:"pages.md",route:"/posts/pages",meta:{title:"Next.js Pages",date:"2021/3/18",description:"Learn more about Next.js pages.",tag:"web development",author:"You"},pageMap:[{name:"index",route:"/",frontMatter:{type:"page",title:"About",date:"2021-03-19T00:00:00.000Z"}},{name:"posts",children:[{name:"index",route:"/posts",frontMatter:{type:"posts",title:"Posts",date:"2021-03-18T00:00:00.000Z"}},{name:"markdown",route:"/posts/markdown",frontMatter:{title:"Markdown Examples",date:"2021/3/19",description:"View examples of all possible Markdown options.",tag:"web development",author:"You"}},{name:"pages",route:"/posts/pages",frontMatter:{title:"Next.js Pages",date:"2021/3/18",description:"Learn more about Next.js pages.",tag:"web development",author:"You"}}],route:"/posts"},{name:"projects",route:"/projects",frontMatter:{type:"page",title:"Projects",date:"2021-03-18T00:00:00.000Z"}},{name:"tags",children:[{name:"[tag]",route:"/tags/[tag]",frontMatter:{type:"tag",title:"Tagged Posts"}}],route:"/tags"}]},o.Z))(c({},e,{children:h}))}}},function(e){e.O(0,[774,353,888,179],(function(){return n=7265,e(e.s=n);var n}));var n=e.O();_N_E=n}]);